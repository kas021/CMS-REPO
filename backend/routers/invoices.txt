from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from typing import List, Optional
from datetime import datetime

from .. import crud, schemas, models, security
from ..database import get_db

router = APIRouter(
    prefix="/invoices",
    tags=["Invoices"],
    dependencies=[Depends(security.get_current_user)],
)

@router.get("/", response_model=List[schemas.Invoice])
def read_invoices(
    skip: int = 0,
    limit: int = 100,
    search: Optional[str] = None,
    search_mode: Optional[str] = None,
    start_date: Optional[datetime] = None,
    end_date: Optional[datetime] = None,
    db: Session = Depends(get_db)
):
    invoices = crud.get_invoices(
        db, 
        skip=skip, 
        limit=limit, 
        search=search, 
        search_mode=search_mode, 
        start_date=start_date, 
        end_date=end_date
    )
    return invoices

@router.get("/{invoice_id}", response_model=schemas.Invoice)
def read_invoice(invoice_id: int, db: Session = Depends(get_db)):
    db_invoice = crud.get_invoice(db, invoice_id=invoice_id)
    if db_invoice is None:
        raise HTTPException(status_code=404, detail="Invoice not found")
    return db_invoice

@router.post("/{invoice_id}/recalculate", response_model=schemas.Invoice)
def recalculate_invoice(invoice_id: int, db: Session = Depends(get_db), current_user: models.User = Depends(security.get_current_super_admin)):
    updated_invoice = crud.recalc_invoice_total(db, invoice_id=invoice_id)
    if updated_invoice is None:
        raise HTTPException(status_code=404, detail="Invoice not found")
    db.commit()
    db.refresh(updated_invoice)
    return updated_invoice