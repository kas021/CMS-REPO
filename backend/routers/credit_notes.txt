from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from typing import List

from .. import crud, schemas, models, security
from ..database import get_db

router = APIRouter(
    prefix="/credit-notes",
    tags=["Credit Notes"],
    dependencies=[Depends(security.get_current_user)],
)

@router.post("/", response_model=schemas.CreditNote, status_code=201)
def create_credit_note(
    note: schemas.CreditNoteCreate,
    db: Session = Depends(get_db),
    current_user: models.User = Depends(security.get_current_super_admin)
):
    # Validate customer exists
    customer = crud.get_customer(db, customer_id=note.customerId)
    if not customer:
        raise HTTPException(status_code=404, detail="Customer not found")
    
    # Validate invoice exists if it's a job-based note
    if note.type == models.CreditNoteType.JOB_BASED and note.invoiceId:
        invoice = crud.get_invoice(db, invoice_id=note.invoiceId)
        if not invoice:
            raise HTTPException(status_code=404, detail="Invoice not found")
        if invoice.customerId != note.customerId:
            raise HTTPException(status_code=400, detail="Invoice does not belong to the specified customer")

    return crud.create_credit_note(db=db, note=note)


@router.get("/", response_model=List[schemas.CreditNote])
def read_credit_notes(
    skip: int = 0,
    limit: int = 100,
    db: Session = Depends(get_db)
):
    notes = crud.get_credit_notes(db, skip=skip, limit=limit)
    return notes
